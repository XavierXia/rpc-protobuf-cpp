// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyService.proto

#ifndef PROTOBUF_INCLUDED_MyService_2eproto
#define PROTOBUF_INCLUDED_MyService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MyService_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_MyService_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_MyService_2eproto();
namespace example {
namespace rpcProto {
class EchoReq;
class EchoReqDefaultTypeInternal;
extern EchoReqDefaultTypeInternal _EchoReq_default_instance_;
class EchoRes;
class EchoResDefaultTypeInternal;
extern EchoResDefaultTypeInternal _EchoRes_default_instance_;
class OperaReq;
class OperaReqDefaultTypeInternal;
extern OperaReqDefaultTypeInternal _OperaReq_default_instance_;
class OperaReqF;
class OperaReqFDefaultTypeInternal;
extern OperaReqFDefaultTypeInternal _OperaReqF_default_instance_;
class OperaRes;
class OperaResDefaultTypeInternal;
extern OperaResDefaultTypeInternal _OperaRes_default_instance_;
class OperaResF;
class OperaResFDefaultTypeInternal;
extern OperaResFDefaultTypeInternal _OperaResF_default_instance_;
}  // namespace rpcProto
}  // namespace example
namespace google {
namespace protobuf {
template<> ::example::rpcProto::EchoReq* Arena::CreateMaybeMessage<::example::rpcProto::EchoReq>(Arena*);
template<> ::example::rpcProto::EchoRes* Arena::CreateMaybeMessage<::example::rpcProto::EchoRes>(Arena*);
template<> ::example::rpcProto::OperaReq* Arena::CreateMaybeMessage<::example::rpcProto::OperaReq>(Arena*);
template<> ::example::rpcProto::OperaReqF* Arena::CreateMaybeMessage<::example::rpcProto::OperaReqF>(Arena*);
template<> ::example::rpcProto::OperaRes* Arena::CreateMaybeMessage<::example::rpcProto::OperaRes>(Arena*);
template<> ::example::rpcProto::OperaResF* Arena::CreateMaybeMessage<::example::rpcProto::OperaResF>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace example {
namespace rpcProto {

// ===================================================================

class EchoReq :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:example.rpcProto.EchoReq) */ {
 public:
  EchoReq();
  virtual ~EchoReq();

  EchoReq(const EchoReq& from);

  inline EchoReq& operator=(const EchoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EchoReq(EchoReq&& from) noexcept
    : EchoReq() {
    *this = ::std::move(from);
  }

  inline EchoReq& operator=(EchoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EchoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoReq* internal_default_instance() {
    return reinterpret_cast<const EchoReq*>(
               &_EchoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EchoReq* other);
  friend void swap(EchoReq& a, EchoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EchoReq* New() const final {
    return CreateMaybeMessage<EchoReq>(nullptr);
  }

  EchoReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EchoReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EchoReq& from);
  void MergeFrom(const EchoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string request = 1;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 1;
  const ::std::string& request() const;
  void set_request(const ::std::string& value);
  #if LANG_CXX11
  void set_request(::std::string&& value);
  #endif
  void set_request(const char* value);
  void set_request(const char* value, size_t size);
  ::std::string* mutable_request();
  ::std::string* release_request();
  void set_allocated_request(::std::string* request);

  // @@protoc_insertion_point(class_scope:example.rpcProto.EchoReq)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr request_;
  friend struct ::TableStruct_MyService_2eproto;
};
// -------------------------------------------------------------------

class EchoRes :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:example.rpcProto.EchoRes) */ {
 public:
  EchoRes();
  virtual ~EchoRes();

  EchoRes(const EchoRes& from);

  inline EchoRes& operator=(const EchoRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EchoRes(EchoRes&& from) noexcept
    : EchoRes() {
    *this = ::std::move(from);
  }

  inline EchoRes& operator=(EchoRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EchoRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EchoRes* internal_default_instance() {
    return reinterpret_cast<const EchoRes*>(
               &_EchoRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EchoRes* other);
  friend void swap(EchoRes& a, EchoRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EchoRes* New() const final {
    return CreateMaybeMessage<EchoRes>(nullptr);
  }

  EchoRes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EchoRes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EchoRes& from);
  void MergeFrom(const EchoRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EchoRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string response = 1;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 1;
  const ::std::string& response() const;
  void set_response(const ::std::string& value);
  #if LANG_CXX11
  void set_response(::std::string&& value);
  #endif
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  ::std::string* mutable_response();
  ::std::string* release_response();
  void set_allocated_response(::std::string* response);

  // @@protoc_insertion_point(class_scope:example.rpcProto.EchoRes)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr response_;
  friend struct ::TableStruct_MyService_2eproto;
};
// -------------------------------------------------------------------

class OperaReq :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:example.rpcProto.OperaReq) */ {
 public:
  OperaReq();
  virtual ~OperaReq();

  OperaReq(const OperaReq& from);

  inline OperaReq& operator=(const OperaReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OperaReq(OperaReq&& from) noexcept
    : OperaReq() {
    *this = ::std::move(from);
  }

  inline OperaReq& operator=(OperaReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OperaReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperaReq* internal_default_instance() {
    return reinterpret_cast<const OperaReq*>(
               &_OperaReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(OperaReq* other);
  friend void swap(OperaReq& a, OperaReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OperaReq* New() const final {
    return CreateMaybeMessage<OperaReq>(nullptr);
  }

  OperaReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OperaReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OperaReq& from);
  void MergeFrom(const OperaReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperaReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 a = 1;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 1;
  ::google::protobuf::int64 a() const;
  void set_a(::google::protobuf::int64 value);

  // required int64 b = 2;
  bool has_b() const;
  void clear_b();
  static const int kBFieldNumber = 2;
  ::google::protobuf::int64 b() const;
  void set_b(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:example.rpcProto.OperaReq)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 a_;
  ::google::protobuf::int64 b_;
  friend struct ::TableStruct_MyService_2eproto;
};
// -------------------------------------------------------------------

class OperaRes :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:example.rpcProto.OperaRes) */ {
 public:
  OperaRes();
  virtual ~OperaRes();

  OperaRes(const OperaRes& from);

  inline OperaRes& operator=(const OperaRes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OperaRes(OperaRes&& from) noexcept
    : OperaRes() {
    *this = ::std::move(from);
  }

  inline OperaRes& operator=(OperaRes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OperaRes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperaRes* internal_default_instance() {
    return reinterpret_cast<const OperaRes*>(
               &_OperaRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(OperaRes* other);
  friend void swap(OperaRes& a, OperaRes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OperaRes* New() const final {
    return CreateMaybeMessage<OperaRes>(nullptr);
  }

  OperaRes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OperaRes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OperaRes& from);
  void MergeFrom(const OperaRes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperaRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 c = 1;
  bool has_c() const;
  void clear_c();
  static const int kCFieldNumber = 1;
  ::google::protobuf::int64 c() const;
  void set_c(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:example.rpcProto.OperaRes)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int64 c_;
  friend struct ::TableStruct_MyService_2eproto;
};
// -------------------------------------------------------------------

class OperaReqF :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:example.rpcProto.OperaReqF) */ {
 public:
  OperaReqF();
  virtual ~OperaReqF();

  OperaReqF(const OperaReqF& from);

  inline OperaReqF& operator=(const OperaReqF& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OperaReqF(OperaReqF&& from) noexcept
    : OperaReqF() {
    *this = ::std::move(from);
  }

  inline OperaReqF& operator=(OperaReqF&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OperaReqF& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperaReqF* internal_default_instance() {
    return reinterpret_cast<const OperaReqF*>(
               &_OperaReqF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(OperaReqF* other);
  friend void swap(OperaReqF& a, OperaReqF& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OperaReqF* New() const final {
    return CreateMaybeMessage<OperaReqF>(nullptr);
  }

  OperaReqF* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OperaReqF>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OperaReqF& from);
  void MergeFrom(const OperaReqF& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperaReqF* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float a = 1;
  bool has_a() const;
  void clear_a();
  static const int kAFieldNumber = 1;
  float a() const;
  void set_a(float value);

  // required float b = 2;
  bool has_b() const;
  void clear_b();
  static const int kBFieldNumber = 2;
  float b() const;
  void set_b(float value);

  // @@protoc_insertion_point(class_scope:example.rpcProto.OperaReqF)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float a_;
  float b_;
  friend struct ::TableStruct_MyService_2eproto;
};
// -------------------------------------------------------------------

class OperaResF :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:example.rpcProto.OperaResF) */ {
 public:
  OperaResF();
  virtual ~OperaResF();

  OperaResF(const OperaResF& from);

  inline OperaResF& operator=(const OperaResF& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OperaResF(OperaResF&& from) noexcept
    : OperaResF() {
    *this = ::std::move(from);
  }

  inline OperaResF& operator=(OperaResF&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OperaResF& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperaResF* internal_default_instance() {
    return reinterpret_cast<const OperaResF*>(
               &_OperaResF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(OperaResF* other);
  friend void swap(OperaResF& a, OperaResF& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OperaResF* New() const final {
    return CreateMaybeMessage<OperaResF>(nullptr);
  }

  OperaResF* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OperaResF>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OperaResF& from);
  void MergeFrom(const OperaResF& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperaResF* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float c = 1;
  bool has_c() const;
  void clear_c();
  static const int kCFieldNumber = 1;
  float c() const;
  void set_c(float value);

  // @@protoc_insertion_point(class_scope:example.rpcProto.OperaResF)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float c_;
  friend struct ::TableStruct_MyService_2eproto;
};
// ===================================================================

class MyService_Stub;

class MyService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline MyService() {};
 public:
  virtual ~MyService();

  typedef MyService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Echo(::google::protobuf::RpcController* controller,
                       const ::example::rpcProto::EchoReq* request,
                       ::example::rpcProto::EchoRes* response,
                       ::google::protobuf::Closure* done);
  virtual void Add(::google::protobuf::RpcController* controller,
                       const ::example::rpcProto::OperaReq* request,
                       ::example::rpcProto::OperaRes* response,
                       ::google::protobuf::Closure* done);
  virtual void Sub(::google::protobuf::RpcController* controller,
                       const ::example::rpcProto::OperaReq* request,
                       ::example::rpcProto::OperaRes* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MyService);
};

class MyService_Stub : public MyService {
 public:
  MyService_Stub(::google::protobuf::RpcChannel* channel);
  MyService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~MyService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements MyService ------------------------------------------

  void Echo(::google::protobuf::RpcController* controller,
                       const ::example::rpcProto::EchoReq* request,
                       ::example::rpcProto::EchoRes* response,
                       ::google::protobuf::Closure* done);
  void Add(::google::protobuf::RpcController* controller,
                       const ::example::rpcProto::OperaReq* request,
                       ::example::rpcProto::OperaRes* response,
                       ::google::protobuf::Closure* done);
  void Sub(::google::protobuf::RpcController* controller,
                       const ::example::rpcProto::OperaReq* request,
                       ::example::rpcProto::OperaRes* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MyService_Stub);
};


// -------------------------------------------------------------------

class Service2_Stub;

class Service2 : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline Service2() {};
 public:
  virtual ~Service2();

  typedef Service2_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Mul(::google::protobuf::RpcController* controller,
                       const ::example::rpcProto::OperaReqF* request,
                       ::example::rpcProto::OperaResF* response,
                       ::google::protobuf::Closure* done);
  virtual void Div(::google::protobuf::RpcController* controller,
                       const ::example::rpcProto::OperaReqF* request,
                       ::example::rpcProto::OperaResF* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Service2);
};

class Service2_Stub : public Service2 {
 public:
  Service2_Stub(::google::protobuf::RpcChannel* channel);
  Service2_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~Service2_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements Service2 ------------------------------------------

  void Mul(::google::protobuf::RpcController* controller,
                       const ::example::rpcProto::OperaReqF* request,
                       ::example::rpcProto::OperaResF* response,
                       ::google::protobuf::Closure* done);
  void Div(::google::protobuf::RpcController* controller,
                       const ::example::rpcProto::OperaReqF* request,
                       ::example::rpcProto::OperaResF* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(Service2_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EchoReq

// required string request = 1;
inline bool EchoReq::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoReq::clear_request() {
  request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& EchoReq::request() const {
  // @@protoc_insertion_point(field_get:example.rpcProto.EchoReq.request)
  return request_.GetNoArena();
}
inline void EchoReq::set_request(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:example.rpcProto.EchoReq.request)
}
#if LANG_CXX11
inline void EchoReq::set_request(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  request_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:example.rpcProto.EchoReq.request)
}
#endif
inline void EchoReq::set_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:example.rpcProto.EchoReq.request)
}
inline void EchoReq::set_request(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:example.rpcProto.EchoReq.request)
}
inline ::std::string* EchoReq::mutable_request() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:example.rpcProto.EchoReq.request)
  return request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EchoReq::release_request() {
  // @@protoc_insertion_point(field_release:example.rpcProto.EchoReq.request)
  if (!has_request()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return request_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EchoReq::set_allocated_request(::std::string* request) {
  if (request != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request);
  // @@protoc_insertion_point(field_set_allocated:example.rpcProto.EchoReq.request)
}

// -------------------------------------------------------------------

// EchoRes

// required string response = 1;
inline bool EchoRes::has_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoRes::clear_response() {
  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& EchoRes::response() const {
  // @@protoc_insertion_point(field_get:example.rpcProto.EchoRes.response)
  return response_.GetNoArena();
}
inline void EchoRes::set_response(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:example.rpcProto.EchoRes.response)
}
#if LANG_CXX11
inline void EchoRes::set_response(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:example.rpcProto.EchoRes.response)
}
#endif
inline void EchoRes::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:example.rpcProto.EchoRes.response)
}
inline void EchoRes::set_response(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:example.rpcProto.EchoRes.response)
}
inline ::std::string* EchoRes::mutable_response() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:example.rpcProto.EchoRes.response)
  return response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EchoRes::release_response() {
  // @@protoc_insertion_point(field_release:example.rpcProto.EchoRes.response)
  if (!has_response()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return response_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EchoRes::set_allocated_response(::std::string* response) {
  if (response != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:example.rpcProto.EchoRes.response)
}

// -------------------------------------------------------------------

// OperaReq

// required int64 a = 1;
inline bool OperaReq::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperaReq::clear_a() {
  a_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int64 OperaReq::a() const {
  // @@protoc_insertion_point(field_get:example.rpcProto.OperaReq.a)
  return a_;
}
inline void OperaReq::set_a(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  a_ = value;
  // @@protoc_insertion_point(field_set:example.rpcProto.OperaReq.a)
}

// required int64 b = 2;
inline bool OperaReq::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OperaReq::clear_b() {
  b_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int64 OperaReq::b() const {
  // @@protoc_insertion_point(field_get:example.rpcProto.OperaReq.b)
  return b_;
}
inline void OperaReq::set_b(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  b_ = value;
  // @@protoc_insertion_point(field_set:example.rpcProto.OperaReq.b)
}

// -------------------------------------------------------------------

// OperaRes

// required int64 c = 1;
inline bool OperaRes::has_c() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperaRes::clear_c() {
  c_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int64 OperaRes::c() const {
  // @@protoc_insertion_point(field_get:example.rpcProto.OperaRes.c)
  return c_;
}
inline void OperaRes::set_c(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  c_ = value;
  // @@protoc_insertion_point(field_set:example.rpcProto.OperaRes.c)
}

// -------------------------------------------------------------------

// OperaReqF

// required float a = 1;
inline bool OperaReqF::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperaReqF::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float OperaReqF::a() const {
  // @@protoc_insertion_point(field_get:example.rpcProto.OperaReqF.a)
  return a_;
}
inline void OperaReqF::set_a(float value) {
  _has_bits_[0] |= 0x00000001u;
  a_ = value;
  // @@protoc_insertion_point(field_set:example.rpcProto.OperaReqF.a)
}

// required float b = 2;
inline bool OperaReqF::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OperaReqF::clear_b() {
  b_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float OperaReqF::b() const {
  // @@protoc_insertion_point(field_get:example.rpcProto.OperaReqF.b)
  return b_;
}
inline void OperaReqF::set_b(float value) {
  _has_bits_[0] |= 0x00000002u;
  b_ = value;
  // @@protoc_insertion_point(field_set:example.rpcProto.OperaReqF.b)
}

// -------------------------------------------------------------------

// OperaResF

// required float c = 1;
inline bool OperaResF::has_c() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperaResF::clear_c() {
  c_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float OperaResF::c() const {
  // @@protoc_insertion_point(field_get:example.rpcProto.OperaResF.c)
  return c_;
}
inline void OperaResF::set_c(float value) {
  _has_bits_[0] |= 0x00000001u;
  c_ = value;
  // @@protoc_insertion_point(field_set:example.rpcProto.OperaResF.c)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpcProto
}  // namespace example

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_MyService_2eproto
