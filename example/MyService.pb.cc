// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MyService.proto

#include "MyService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace example {
namespace rpcProto {
class EchoReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EchoReq> _instance;
} _EchoReq_default_instance_;
class EchoResDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EchoRes> _instance;
} _EchoRes_default_instance_;
class OperaReqDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OperaReq> _instance;
} _OperaReq_default_instance_;
class OperaResDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OperaRes> _instance;
} _OperaRes_default_instance_;
class OperaReqFDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OperaReqF> _instance;
} _OperaReqF_default_instance_;
class OperaResFDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OperaResF> _instance;
} _OperaResF_default_instance_;
}  // namespace rpcProto
}  // namespace example
static void InitDefaultsEchoReq_MyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::example::rpcProto::_EchoReq_default_instance_;
    new (ptr) ::example::rpcProto::EchoReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::example::rpcProto::EchoReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EchoReq_MyService_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEchoReq_MyService_2eproto}, {}};

static void InitDefaultsEchoRes_MyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::example::rpcProto::_EchoRes_default_instance_;
    new (ptr) ::example::rpcProto::EchoRes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::example::rpcProto::EchoRes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EchoRes_MyService_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEchoRes_MyService_2eproto}, {}};

static void InitDefaultsOperaReq_MyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::example::rpcProto::_OperaReq_default_instance_;
    new (ptr) ::example::rpcProto::OperaReq();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::example::rpcProto::OperaReq::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OperaReq_MyService_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOperaReq_MyService_2eproto}, {}};

static void InitDefaultsOperaRes_MyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::example::rpcProto::_OperaRes_default_instance_;
    new (ptr) ::example::rpcProto::OperaRes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::example::rpcProto::OperaRes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OperaRes_MyService_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOperaRes_MyService_2eproto}, {}};

static void InitDefaultsOperaReqF_MyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::example::rpcProto::_OperaReqF_default_instance_;
    new (ptr) ::example::rpcProto::OperaReqF();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::example::rpcProto::OperaReqF::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OperaReqF_MyService_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOperaReqF_MyService_2eproto}, {}};

static void InitDefaultsOperaResF_MyService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::example::rpcProto::_OperaResF_default_instance_;
    new (ptr) ::example::rpcProto::OperaResF();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::example::rpcProto::OperaResF::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OperaResF_MyService_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOperaResF_MyService_2eproto}, {}};

void InitDefaults_MyService_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_EchoReq_MyService_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EchoRes_MyService_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OperaReq_MyService_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OperaRes_MyService_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OperaReqF_MyService_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OperaResF_MyService_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_MyService_2eproto[6];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_MyService_2eproto = nullptr;
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors_MyService_2eproto[2];

const ::google::protobuf::uint32 TableStruct_MyService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::example::rpcProto::EchoReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::example::rpcProto::EchoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::example::rpcProto::EchoReq, request_),
  0,
  PROTOBUF_FIELD_OFFSET(::example::rpcProto::EchoRes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::example::rpcProto::EchoRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::example::rpcProto::EchoRes, response_),
  0,
  PROTOBUF_FIELD_OFFSET(::example::rpcProto::OperaReq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::example::rpcProto::OperaReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::example::rpcProto::OperaReq, a_),
  PROTOBUF_FIELD_OFFSET(::example::rpcProto::OperaReq, b_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::example::rpcProto::OperaRes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::example::rpcProto::OperaRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::example::rpcProto::OperaRes, c_),
  0,
  PROTOBUF_FIELD_OFFSET(::example::rpcProto::OperaReqF, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::example::rpcProto::OperaReqF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::example::rpcProto::OperaReqF, a_),
  PROTOBUF_FIELD_OFFSET(::example::rpcProto::OperaReqF, b_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::example::rpcProto::OperaResF, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::example::rpcProto::OperaResF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::example::rpcProto::OperaResF, c_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::example::rpcProto::EchoReq)},
  { 7, 13, sizeof(::example::rpcProto::EchoRes)},
  { 14, 21, sizeof(::example::rpcProto::OperaReq)},
  { 23, 29, sizeof(::example::rpcProto::OperaRes)},
  { 30, 37, sizeof(::example::rpcProto::OperaReqF)},
  { 39, 45, sizeof(::example::rpcProto::OperaResF)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::example::rpcProto::_EchoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::example::rpcProto::_EchoRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::example::rpcProto::_OperaReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::example::rpcProto::_OperaRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::example::rpcProto::_OperaReqF_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::example::rpcProto::_OperaResF_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_MyService_2eproto = {
  {}, AddDescriptors_MyService_2eproto, "MyService.proto", schemas,
  file_default_instances, TableStruct_MyService_2eproto::offsets,
  file_level_metadata_MyService_2eproto, 6, file_level_enum_descriptors_MyService_2eproto, file_level_service_descriptors_MyService_2eproto,
};

const char descriptor_table_protodef_MyService_2eproto[] =
  "\n\017MyService.proto\022\020example.rpcProto\"\032\n\007E"
  "choReq\022\017\n\007request\030\001 \002(\t\"\033\n\007EchoRes\022\020\n\010re"
  "sponse\030\001 \002(\t\" \n\010OperaReq\022\t\n\001a\030\001 \002(\003\022\t\n\001b"
  "\030\002 \002(\003\"\025\n\010OperaRes\022\t\n\001c\030\001 \002(\003\"!\n\tOperaRe"
  "qF\022\t\n\001a\030\001 \002(\002\022\t\n\001b\030\002 \002(\002\"\026\n\tOperaResF\022\t\n"
  "\001c\030\001 \002(\0022\307\001\n\tMyService\022<\n\004Echo\022\031.example"
  ".rpcProto.EchoReq\032\031.example.rpcProto.Ech"
  "oRes\022=\n\003Add\022\032.example.rpcProto.OperaReq\032"
  "\032.example.rpcProto.OperaRes\022=\n\003Sub\022\032.exa"
  "mple.rpcProto.OperaReq\032\032.example.rpcProt"
  "o.OperaRes2\214\001\n\010Service2\022\?\n\003Mul\022\033.example"
  ".rpcProto.OperaReqF\032\033.example.rpcProto.O"
  "peraResF\022\?\n\003Div\022\033.example.rpcProto.Opera"
  "ReqF\032\033.example.rpcProto.OperaResFB\003\200\001\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_MyService_2eproto = {
  false, InitDefaults_MyService_2eproto, 
  descriptor_table_protodef_MyService_2eproto,
  "MyService.proto", &assign_descriptors_table_MyService_2eproto, 558,
};

void AddDescriptors_MyService_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_MyService_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MyService_2eproto = []() { AddDescriptors_MyService_2eproto(); return true; }();
namespace example {
namespace rpcProto {

// ===================================================================

void EchoReq::InitAsDefaultInstance() {
}
class EchoReq::HasBitSetters {
 public:
  static void set_has_request(EchoReq* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EchoReq::kRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EchoReq::EchoReq()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.rpcProto.EchoReq)
}
EchoReq::EchoReq(const EchoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_request()) {
    request_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_);
  }
  // @@protoc_insertion_point(copy_constructor:example.rpcProto.EchoReq)
}

void EchoReq::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EchoReq_MyService_2eproto.base);
  request_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EchoReq::~EchoReq() {
  // @@protoc_insertion_point(destructor:example.rpcProto.EchoReq)
  SharedDtor();
}

void EchoReq::SharedDtor() {
  request_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EchoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EchoReq& EchoReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EchoReq_MyService_2eproto.base);
  return *internal_default_instance();
}


void EchoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:example.rpcProto.EchoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    request_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EchoReq::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EchoReq*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required string request = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("example.rpcProto.EchoReq.request");
        object = msg->mutable_request();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EchoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:example.rpcProto.EchoReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string request = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->request().data(), static_cast<int>(this->request().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "example.rpcProto.EchoReq.request");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:example.rpcProto.EchoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:example.rpcProto.EchoReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EchoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:example.rpcProto.EchoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string request = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request().data(), static_cast<int>(this->request().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "example.rpcProto.EchoReq.request");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:example.rpcProto.EchoReq)
}

::google::protobuf::uint8* EchoReq::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.rpcProto.EchoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string request = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->request().data(), static_cast<int>(this->request().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "example.rpcProto.EchoReq.request");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.rpcProto.EchoReq)
  return target;
}

size_t EchoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.rpcProto.EchoReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string request = 1;
  if (has_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EchoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:example.rpcProto.EchoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const EchoReq* source =
      ::google::protobuf::DynamicCastToGenerated<EchoReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:example.rpcProto.EchoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:example.rpcProto.EchoReq)
    MergeFrom(*source);
  }
}

void EchoReq::MergeFrom(const EchoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:example.rpcProto.EchoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_request()) {
    _has_bits_[0] |= 0x00000001u;
    request_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_);
  }
}

void EchoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:example.rpcProto.EchoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoReq::CopyFrom(const EchoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.rpcProto.EchoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void EchoReq::Swap(EchoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EchoReq::InternalSwap(EchoReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  request_.Swap(&other->request_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata EchoReq::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MyService_2eproto);
  return ::file_level_metadata_MyService_2eproto[kIndexInFileMessages];
}


// ===================================================================

void EchoRes::InitAsDefaultInstance() {
}
class EchoRes::HasBitSetters {
 public:
  static void set_has_response(EchoRes* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EchoRes::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EchoRes::EchoRes()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.rpcProto.EchoRes)
}
EchoRes::EchoRes(const EchoRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_response()) {
    response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_);
  }
  // @@protoc_insertion_point(copy_constructor:example.rpcProto.EchoRes)
}

void EchoRes::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_EchoRes_MyService_2eproto.base);
  response_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EchoRes::~EchoRes() {
  // @@protoc_insertion_point(destructor:example.rpcProto.EchoRes)
  SharedDtor();
}

void EchoRes::SharedDtor() {
  response_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EchoRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EchoRes& EchoRes::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_EchoRes_MyService_2eproto.base);
  return *internal_default_instance();
}


void EchoRes::Clear() {
// @@protoc_insertion_point(message_clear_start:example.rpcProto.EchoRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    response_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EchoRes::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<EchoRes*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required string response = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("example.rpcProto.EchoRes.response");
        object = msg->mutable_response();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EchoRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:example.rpcProto.EchoRes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->response().data(), static_cast<int>(this->response().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "example.rpcProto.EchoRes.response");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:example.rpcProto.EchoRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:example.rpcProto.EchoRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EchoRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:example.rpcProto.EchoRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string response = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response().data(), static_cast<int>(this->response().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "example.rpcProto.EchoRes.response");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:example.rpcProto.EchoRes)
}

::google::protobuf::uint8* EchoRes::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.rpcProto.EchoRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string response = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->response().data(), static_cast<int>(this->response().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "example.rpcProto.EchoRes.response");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.rpcProto.EchoRes)
  return target;
}

size_t EchoRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.rpcProto.EchoRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string response = 1;
  if (has_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->response());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EchoRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:example.rpcProto.EchoRes)
  GOOGLE_DCHECK_NE(&from, this);
  const EchoRes* source =
      ::google::protobuf::DynamicCastToGenerated<EchoRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:example.rpcProto.EchoRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:example.rpcProto.EchoRes)
    MergeFrom(*source);
  }
}

void EchoRes::MergeFrom(const EchoRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:example.rpcProto.EchoRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_response()) {
    _has_bits_[0] |= 0x00000001u;
    response_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_);
  }
}

void EchoRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:example.rpcProto.EchoRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EchoRes::CopyFrom(const EchoRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.rpcProto.EchoRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EchoRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void EchoRes::Swap(EchoRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EchoRes::InternalSwap(EchoRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  response_.Swap(&other->response_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata EchoRes::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MyService_2eproto);
  return ::file_level_metadata_MyService_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OperaReq::InitAsDefaultInstance() {
}
class OperaReq::HasBitSetters {
 public:
  static void set_has_a(OperaReq* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_b(OperaReq* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperaReq::kAFieldNumber;
const int OperaReq::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperaReq::OperaReq()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.rpcProto.OperaReq)
}
OperaReq::OperaReq(const OperaReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&a_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:example.rpcProto.OperaReq)
}

void OperaReq::SharedCtor() {
  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&a_)) + sizeof(b_));
}

OperaReq::~OperaReq() {
  // @@protoc_insertion_point(destructor:example.rpcProto.OperaReq)
  SharedDtor();
}

void OperaReq::SharedDtor() {
}

void OperaReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperaReq& OperaReq::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OperaReq_MyService_2eproto.base);
  return *internal_default_instance();
}


void OperaReq::Clear() {
// @@protoc_insertion_point(message_clear_start:example.rpcProto.OperaReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_) -
        reinterpret_cast<char*>(&a_)) + sizeof(b_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OperaReq::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OperaReq*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 a = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_a(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required int64 b = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_b(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OperaReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:example.rpcProto.OperaReq)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 a = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_a(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 b = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_b(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:example.rpcProto.OperaReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:example.rpcProto.OperaReq)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OperaReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:example.rpcProto.OperaReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 a = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->a(), output);
  }

  // required int64 b = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->b(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:example.rpcProto.OperaReq)
}

::google::protobuf::uint8* OperaReq::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.rpcProto.OperaReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->a(), target);
  }

  // required int64 b = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->b(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.rpcProto.OperaReq)
  return target;
}

size_t OperaReq::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:example.rpcProto.OperaReq)
  size_t total_size = 0;

  if (has_a()) {
    // required int64 a = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->a());
  }

  if (has_b()) {
    // required int64 b = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->b());
  }

  return total_size;
}
size_t OperaReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.rpcProto.OperaReq)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 a = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->a());

    // required int64 b = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->b());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperaReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:example.rpcProto.OperaReq)
  GOOGLE_DCHECK_NE(&from, this);
  const OperaReq* source =
      ::google::protobuf::DynamicCastToGenerated<OperaReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:example.rpcProto.OperaReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:example.rpcProto.OperaReq)
    MergeFrom(*source);
  }
}

void OperaReq::MergeFrom(const OperaReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:example.rpcProto.OperaReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000002u) {
      b_ = from.b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OperaReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:example.rpcProto.OperaReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperaReq::CopyFrom(const OperaReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.rpcProto.OperaReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperaReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void OperaReq::Swap(OperaReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperaReq::InternalSwap(OperaReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
  swap(b_, other->b_);
}

::google::protobuf::Metadata OperaReq::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MyService_2eproto);
  return ::file_level_metadata_MyService_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OperaRes::InitAsDefaultInstance() {
}
class OperaRes::HasBitSetters {
 public:
  static void set_has_c(OperaRes* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperaRes::kCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperaRes::OperaRes()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.rpcProto.OperaRes)
}
OperaRes::OperaRes(const OperaRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  c_ = from.c_;
  // @@protoc_insertion_point(copy_constructor:example.rpcProto.OperaRes)
}

void OperaRes::SharedCtor() {
  c_ = PROTOBUF_LONGLONG(0);
}

OperaRes::~OperaRes() {
  // @@protoc_insertion_point(destructor:example.rpcProto.OperaRes)
  SharedDtor();
}

void OperaRes::SharedDtor() {
}

void OperaRes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperaRes& OperaRes::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OperaRes_MyService_2eproto.base);
  return *internal_default_instance();
}


void OperaRes::Clear() {
// @@protoc_insertion_point(message_clear_start:example.rpcProto.OperaRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  c_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OperaRes::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OperaRes*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 c = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_c(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OperaRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:example.rpcProto.OperaRes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 c = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_c(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:example.rpcProto.OperaRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:example.rpcProto.OperaRes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OperaRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:example.rpcProto.OperaRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 c = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->c(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:example.rpcProto.OperaRes)
}

::google::protobuf::uint8* OperaRes::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.rpcProto.OperaRes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 c = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->c(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.rpcProto.OperaRes)
  return target;
}

size_t OperaRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.rpcProto.OperaRes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 c = 1;
  if (has_c()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->c());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperaRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:example.rpcProto.OperaRes)
  GOOGLE_DCHECK_NE(&from, this);
  const OperaRes* source =
      ::google::protobuf::DynamicCastToGenerated<OperaRes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:example.rpcProto.OperaRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:example.rpcProto.OperaRes)
    MergeFrom(*source);
  }
}

void OperaRes::MergeFrom(const OperaRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:example.rpcProto.OperaRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_c()) {
    set_c(from.c());
  }
}

void OperaRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:example.rpcProto.OperaRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperaRes::CopyFrom(const OperaRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.rpcProto.OperaRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperaRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void OperaRes::Swap(OperaRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperaRes::InternalSwap(OperaRes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(c_, other->c_);
}

::google::protobuf::Metadata OperaRes::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MyService_2eproto);
  return ::file_level_metadata_MyService_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OperaReqF::InitAsDefaultInstance() {
}
class OperaReqF::HasBitSetters {
 public:
  static void set_has_a(OperaReqF* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_b(OperaReqF* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperaReqF::kAFieldNumber;
const int OperaReqF::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperaReqF::OperaReqF()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.rpcProto.OperaReqF)
}
OperaReqF::OperaReqF(const OperaReqF& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&a_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:example.rpcProto.OperaReqF)
}

void OperaReqF::SharedCtor() {
  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&a_)) + sizeof(b_));
}

OperaReqF::~OperaReqF() {
  // @@protoc_insertion_point(destructor:example.rpcProto.OperaReqF)
  SharedDtor();
}

void OperaReqF::SharedDtor() {
}

void OperaReqF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperaReqF& OperaReqF::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OperaReqF_MyService_2eproto.base);
  return *internal_default_instance();
}


void OperaReqF::Clear() {
// @@protoc_insertion_point(message_clear_start:example.rpcProto.OperaReqF)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&a_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&b_) -
        reinterpret_cast<char*>(&a_)) + sizeof(b_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OperaReqF::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OperaReqF*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required float a = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_a(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // required float b = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_b(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OperaReqF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:example.rpcProto.OperaReqF)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float a = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_a(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float b = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_b(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:example.rpcProto.OperaReqF)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:example.rpcProto.OperaReqF)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OperaReqF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:example.rpcProto.OperaReqF)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float a = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->a(), output);
  }

  // required float b = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->b(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:example.rpcProto.OperaReqF)
}

::google::protobuf::uint8* OperaReqF::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.rpcProto.OperaReqF)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->a(), target);
  }

  // required float b = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->b(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.rpcProto.OperaReqF)
  return target;
}

size_t OperaReqF::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:example.rpcProto.OperaReqF)
  size_t total_size = 0;

  if (has_a()) {
    // required float a = 1;
    total_size += 1 + 4;
  }

  if (has_b()) {
    // required float b = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t OperaReqF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.rpcProto.OperaReqF)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float a = 1;
    total_size += 1 + 4;

    // required float b = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperaReqF::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:example.rpcProto.OperaReqF)
  GOOGLE_DCHECK_NE(&from, this);
  const OperaReqF* source =
      ::google::protobuf::DynamicCastToGenerated<OperaReqF>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:example.rpcProto.OperaReqF)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:example.rpcProto.OperaReqF)
    MergeFrom(*source);
  }
}

void OperaReqF::MergeFrom(const OperaReqF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:example.rpcProto.OperaReqF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000002u) {
      b_ = from.b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OperaReqF::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:example.rpcProto.OperaReqF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperaReqF::CopyFrom(const OperaReqF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.rpcProto.OperaReqF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperaReqF::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void OperaReqF::Swap(OperaReqF* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperaReqF::InternalSwap(OperaReqF* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
  swap(b_, other->b_);
}

::google::protobuf::Metadata OperaReqF::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MyService_2eproto);
  return ::file_level_metadata_MyService_2eproto[kIndexInFileMessages];
}


// ===================================================================

void OperaResF::InitAsDefaultInstance() {
}
class OperaResF::HasBitSetters {
 public:
  static void set_has_c(OperaResF* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperaResF::kCFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperaResF::OperaResF()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:example.rpcProto.OperaResF)
}
OperaResF::OperaResF(const OperaResF& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  c_ = from.c_;
  // @@protoc_insertion_point(copy_constructor:example.rpcProto.OperaResF)
}

void OperaResF::SharedCtor() {
  c_ = 0;
}

OperaResF::~OperaResF() {
  // @@protoc_insertion_point(destructor:example.rpcProto.OperaResF)
  SharedDtor();
}

void OperaResF::SharedDtor() {
}

void OperaResF::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperaResF& OperaResF::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_OperaResF_MyService_2eproto.base);
  return *internal_default_instance();
}


void OperaResF::Clear() {
// @@protoc_insertion_point(message_clear_start:example.rpcProto.OperaResF)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  c_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OperaResF::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<OperaResF*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required float c = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_c(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OperaResF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:example.rpcProto.OperaResF)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float c = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_c(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:example.rpcProto.OperaResF)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:example.rpcProto.OperaResF)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OperaResF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:example.rpcProto.OperaResF)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float c = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->c(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:example.rpcProto.OperaResF)
}

::google::protobuf::uint8* OperaResF::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:example.rpcProto.OperaResF)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float c = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->c(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:example.rpcProto.OperaResF)
  return target;
}

size_t OperaResF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:example.rpcProto.OperaResF)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required float c = 1;
  if (has_c()) {
    total_size += 1 + 4;
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperaResF::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:example.rpcProto.OperaResF)
  GOOGLE_DCHECK_NE(&from, this);
  const OperaResF* source =
      ::google::protobuf::DynamicCastToGenerated<OperaResF>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:example.rpcProto.OperaResF)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:example.rpcProto.OperaResF)
    MergeFrom(*source);
  }
}

void OperaResF::MergeFrom(const OperaResF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:example.rpcProto.OperaResF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_c()) {
    set_c(from.c());
  }
}

void OperaResF::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:example.rpcProto.OperaResF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperaResF::CopyFrom(const OperaResF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:example.rpcProto.OperaResF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperaResF::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void OperaResF::Swap(OperaResF* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperaResF::InternalSwap(OperaResF* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(c_, other->c_);
}

::google::protobuf::Metadata OperaResF::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_MyService_2eproto);
  return ::file_level_metadata_MyService_2eproto[kIndexInFileMessages];
}


// ===================================================================

MyService::~MyService() {}

const ::google::protobuf::ServiceDescriptor* MyService::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_MyService_2eproto);
  return file_level_service_descriptors_MyService_2eproto[0];
}

const ::google::protobuf::ServiceDescriptor* MyService::GetDescriptor() {
  return descriptor();
}

void MyService::Echo(::google::protobuf::RpcController* controller,
                         const ::example::rpcProto::EchoReq*,
                         ::example::rpcProto::EchoRes*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Echo() not implemented.");
  done->Run();
}

void MyService::Add(::google::protobuf::RpcController* controller,
                         const ::example::rpcProto::OperaReq*,
                         ::example::rpcProto::OperaRes*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Add() not implemented.");
  done->Run();
}

void MyService::Sub(::google::protobuf::RpcController* controller,
                         const ::example::rpcProto::OperaReq*,
                         ::example::rpcProto::OperaRes*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Sub() not implemented.");
  done->Run();
}

void MyService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_MyService_2eproto[0]);
  switch(method->index()) {
    case 0:
      Echo(controller,
             ::google::protobuf::down_cast<const ::example::rpcProto::EchoReq*>(request),
             ::google::protobuf::down_cast< ::example::rpcProto::EchoRes*>(response),
             done);
      break;
    case 1:
      Add(controller,
             ::google::protobuf::down_cast<const ::example::rpcProto::OperaReq*>(request),
             ::google::protobuf::down_cast< ::example::rpcProto::OperaRes*>(response),
             done);
      break;
    case 2:
      Sub(controller,
             ::google::protobuf::down_cast<const ::example::rpcProto::OperaReq*>(request),
             ::google::protobuf::down_cast< ::example::rpcProto::OperaRes*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& MyService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::example::rpcProto::EchoReq::default_instance();
    case 1:
      return ::example::rpcProto::OperaReq::default_instance();
    case 2:
      return ::example::rpcProto::OperaReq::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& MyService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::example::rpcProto::EchoRes::default_instance();
    case 1:
      return ::example::rpcProto::OperaRes::default_instance();
    case 2:
      return ::example::rpcProto::OperaRes::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

MyService_Stub::MyService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
MyService_Stub::MyService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
MyService_Stub::~MyService_Stub() {
  if (owns_channel_) delete channel_;
}

void MyService_Stub::Echo(::google::protobuf::RpcController* controller,
                              const ::example::rpcProto::EchoReq* request,
                              ::example::rpcProto::EchoRes* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void MyService_Stub::Add(::google::protobuf::RpcController* controller,
                              const ::example::rpcProto::OperaReq* request,
                              ::example::rpcProto::OperaRes* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void MyService_Stub::Sub(::google::protobuf::RpcController* controller,
                              const ::example::rpcProto::OperaReq* request,
                              ::example::rpcProto::OperaRes* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
// ===================================================================

Service2::~Service2() {}

const ::google::protobuf::ServiceDescriptor* Service2::descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_MyService_2eproto);
  return file_level_service_descriptors_MyService_2eproto[1];
}

const ::google::protobuf::ServiceDescriptor* Service2::GetDescriptor() {
  return descriptor();
}

void Service2::Mul(::google::protobuf::RpcController* controller,
                         const ::example::rpcProto::OperaReqF*,
                         ::example::rpcProto::OperaResF*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Mul() not implemented.");
  done->Run();
}

void Service2::Div(::google::protobuf::RpcController* controller,
                         const ::example::rpcProto::OperaReqF*,
                         ::example::rpcProto::OperaResF*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Div() not implemented.");
  done->Run();
}

void Service2::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_MyService_2eproto[1]);
  switch(method->index()) {
    case 0:
      Mul(controller,
             ::google::protobuf::down_cast<const ::example::rpcProto::OperaReqF*>(request),
             ::google::protobuf::down_cast< ::example::rpcProto::OperaResF*>(response),
             done);
      break;
    case 1:
      Div(controller,
             ::google::protobuf::down_cast<const ::example::rpcProto::OperaReqF*>(request),
             ::google::protobuf::down_cast< ::example::rpcProto::OperaResF*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& Service2::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::example::rpcProto::OperaReqF::default_instance();
    case 1:
      return ::example::rpcProto::OperaReqF::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& Service2::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::example::rpcProto::OperaResF::default_instance();
    case 1:
      return ::example::rpcProto::OperaResF::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Service2_Stub::Service2_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Service2_Stub::Service2_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
Service2_Stub::~Service2_Stub() {
  if (owns_channel_) delete channel_;
}

void Service2_Stub::Mul(::google::protobuf::RpcController* controller,
                              const ::example::rpcProto::OperaReqF* request,
                              ::example::rpcProto::OperaResF* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Service2_Stub::Div(::google::protobuf::RpcController* controller,
                              const ::example::rpcProto::OperaReqF* request,
                              ::example::rpcProto::OperaResF* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpcProto
}  // namespace example
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::example::rpcProto::EchoReq* Arena::CreateMaybeMessage< ::example::rpcProto::EchoReq >(Arena* arena) {
  return Arena::CreateInternal< ::example::rpcProto::EchoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::example::rpcProto::EchoRes* Arena::CreateMaybeMessage< ::example::rpcProto::EchoRes >(Arena* arena) {
  return Arena::CreateInternal< ::example::rpcProto::EchoRes >(arena);
}
template<> PROTOBUF_NOINLINE ::example::rpcProto::OperaReq* Arena::CreateMaybeMessage< ::example::rpcProto::OperaReq >(Arena* arena) {
  return Arena::CreateInternal< ::example::rpcProto::OperaReq >(arena);
}
template<> PROTOBUF_NOINLINE ::example::rpcProto::OperaRes* Arena::CreateMaybeMessage< ::example::rpcProto::OperaRes >(Arena* arena) {
  return Arena::CreateInternal< ::example::rpcProto::OperaRes >(arena);
}
template<> PROTOBUF_NOINLINE ::example::rpcProto::OperaReqF* Arena::CreateMaybeMessage< ::example::rpcProto::OperaReqF >(Arena* arena) {
  return Arena::CreateInternal< ::example::rpcProto::OperaReqF >(arena);
}
template<> PROTOBUF_NOINLINE ::example::rpcProto::OperaResF* Arena::CreateMaybeMessage< ::example::rpcProto::OperaResF >(Arena* arena) {
  return Arena::CreateInternal< ::example::rpcProto::OperaResF >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
