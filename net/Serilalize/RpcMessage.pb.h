// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RpcMessage.proto

#ifndef PROTOBUF_INCLUDED_RpcMessage_2eproto
#define PROTOBUF_INCLUDED_RpcMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RpcMessage_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_RpcMessage_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_RpcMessage_2eproto();
namespace rpc {
namespace codec {
class RpcMessage;
class RpcMessageDefaultTypeInternal;
extern RpcMessageDefaultTypeInternal _RpcMessage_default_instance_;
}  // namespace codec
}  // namespace rpc
namespace google {
namespace protobuf {
template<> ::rpc::codec::RpcMessage* Arena::CreateMaybeMessage<::rpc::codec::RpcMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace rpc {
namespace codec {

enum MsgType {
  REQUEST = 1,
  RESPONSE = 2,
  ERROR = 3
};
bool MsgType_IsValid(int value);
const MsgType MsgType_MIN = REQUEST;
const MsgType MsgType_MAX = ERROR;
const int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgType_descriptor();
inline const ::std::string& MsgType_Name(MsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgType_descriptor(), value);
}
inline bool MsgType_Parse(
    const ::std::string& name, MsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
enum ErrorCode {
  NO_ERROR = 0,
  WRONG_PROTO = 1,
  NO_SERVICE = 2,
  NO_METHOD = 3,
  INVALID_REQUEST = 4,
  INVALID_RESPONSE = 5,
  TIMEOUT = 6
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = NO_ERROR;
const ErrorCode ErrorCode_MAX = TIMEOUT;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class RpcMessage :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rpc.codec.RpcMessage) */ {
 public:
  RpcMessage();
  virtual ~RpcMessage();

  RpcMessage(const RpcMessage& from);

  inline RpcMessage& operator=(const RpcMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcMessage(RpcMessage&& from) noexcept
    : RpcMessage() {
    *this = ::std::move(from);
  }

  inline RpcMessage& operator=(RpcMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RpcMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RpcMessage* internal_default_instance() {
    return reinterpret_cast<const RpcMessage*>(
               &_RpcMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RpcMessage* other);
  friend void swap(RpcMessage& a, RpcMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcMessage* New() const final {
    return CreateMaybeMessage<RpcMessage>(nullptr);
  }

  RpcMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RpcMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RpcMessage& from);
  void MergeFrom(const RpcMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RpcMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes request = 5;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 5;
  const ::std::string& request() const;
  void set_request(const ::std::string& value);
  #if LANG_CXX11
  void set_request(::std::string&& value);
  #endif
  void set_request(const char* value);
  void set_request(const void* value, size_t size);
  ::std::string* mutable_request();
  ::std::string* release_request();
  void set_allocated_request(::std::string* request);

  // optional bytes response = 6;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 6;
  const ::std::string& response() const;
  void set_response(const ::std::string& value);
  #if LANG_CXX11
  void set_response(::std::string&& value);
  #endif
  void set_response(const char* value);
  void set_response(const void* value, size_t size);
  ::std::string* mutable_response();
  ::std::string* release_response();
  void set_allocated_response(::std::string* response);

  // required int64 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // required uint32 serviceId = 3;
  bool has_serviceid() const;
  void clear_serviceid();
  static const int kServiceIdFieldNumber = 3;
  ::google::protobuf::uint32 serviceid() const;
  void set_serviceid(::google::protobuf::uint32 value);

  // required uint32 methodId = 4;
  bool has_methodid() const;
  void clear_methodid();
  static const int kMethodIdFieldNumber = 4;
  ::google::protobuf::uint32 methodid() const;
  void set_methodid(::google::protobuf::uint32 value);

  // optional .rpc.codec.ErrorCode error = 7;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 7;
  ::rpc::codec::ErrorCode error() const;
  void set_error(::rpc::codec::ErrorCode value);

  // required .rpc.codec.MsgType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::rpc::codec::MsgType type() const;
  void set_type(::rpc::codec::MsgType value);

  // @@protoc_insertion_point(class_scope:rpc.codec.RpcMessage)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr request_;
  ::google::protobuf::internal::ArenaStringPtr response_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::uint32 serviceid_;
  ::google::protobuf::uint32 methodid_;
  int error_;
  int type_;
  friend struct ::TableStruct_RpcMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcMessage

// required .rpc.codec.MsgType type = 1;
inline bool RpcMessage::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RpcMessage::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::rpc::codec::MsgType RpcMessage::type() const {
  // @@protoc_insertion_point(field_get:rpc.codec.RpcMessage.type)
  return static_cast< ::rpc::codec::MsgType >(type_);
}
inline void RpcMessage::set_type(::rpc::codec::MsgType value) {
  assert(::rpc::codec::MsgType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
  // @@protoc_insertion_point(field_set:rpc.codec.RpcMessage.type)
}

// required int64 id = 2;
inline bool RpcMessage::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RpcMessage::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int64 RpcMessage::id() const {
  // @@protoc_insertion_point(field_get:rpc.codec.RpcMessage.id)
  return id_;
}
inline void RpcMessage::set_id(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
  // @@protoc_insertion_point(field_set:rpc.codec.RpcMessage.id)
}

// required uint32 serviceId = 3;
inline bool RpcMessage::has_serviceid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RpcMessage::clear_serviceid() {
  serviceid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 RpcMessage::serviceid() const {
  // @@protoc_insertion_point(field_get:rpc.codec.RpcMessage.serviceId)
  return serviceid_;
}
inline void RpcMessage::set_serviceid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  serviceid_ = value;
  // @@protoc_insertion_point(field_set:rpc.codec.RpcMessage.serviceId)
}

// required uint32 methodId = 4;
inline bool RpcMessage::has_methodid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RpcMessage::clear_methodid() {
  methodid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 RpcMessage::methodid() const {
  // @@protoc_insertion_point(field_get:rpc.codec.RpcMessage.methodId)
  return methodid_;
}
inline void RpcMessage::set_methodid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  methodid_ = value;
  // @@protoc_insertion_point(field_set:rpc.codec.RpcMessage.methodId)
}

// optional bytes request = 5;
inline bool RpcMessage::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RpcMessage::clear_request() {
  request_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& RpcMessage::request() const {
  // @@protoc_insertion_point(field_get:rpc.codec.RpcMessage.request)
  return request_.GetNoArena();
}
inline void RpcMessage::set_request(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.codec.RpcMessage.request)
}
#if LANG_CXX11
inline void RpcMessage::set_request(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  request_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.codec.RpcMessage.request)
}
#endif
inline void RpcMessage::set_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.codec.RpcMessage.request)
}
inline void RpcMessage::set_request(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  request_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.codec.RpcMessage.request)
}
inline ::std::string* RpcMessage::mutable_request() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:rpc.codec.RpcMessage.request)
  return request_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcMessage::release_request() {
  // @@protoc_insertion_point(field_release:rpc.codec.RpcMessage.request)
  if (!has_request()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return request_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcMessage::set_allocated_request(::std::string* request) {
  if (request != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request);
  // @@protoc_insertion_point(field_set_allocated:rpc.codec.RpcMessage.request)
}

// optional bytes response = 6;
inline bool RpcMessage::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RpcMessage::clear_response() {
  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& RpcMessage::response() const {
  // @@protoc_insertion_point(field_get:rpc.codec.RpcMessage.response)
  return response_.GetNoArena();
}
inline void RpcMessage::set_response(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rpc.codec.RpcMessage.response)
}
#if LANG_CXX11
inline void RpcMessage::set_response(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rpc.codec.RpcMessage.response)
}
#endif
inline void RpcMessage::set_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rpc.codec.RpcMessage.response)
}
inline void RpcMessage::set_response(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rpc.codec.RpcMessage.response)
}
inline ::std::string* RpcMessage::mutable_response() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:rpc.codec.RpcMessage.response)
  return response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcMessage::release_response() {
  // @@protoc_insertion_point(field_release:rpc.codec.RpcMessage.response)
  if (!has_response()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return response_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcMessage::set_allocated_response(::std::string* response) {
  if (response != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:rpc.codec.RpcMessage.response)
}

// optional .rpc.codec.ErrorCode error = 7;
inline bool RpcMessage::has_error() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RpcMessage::clear_error() {
  error_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::rpc::codec::ErrorCode RpcMessage::error() const {
  // @@protoc_insertion_point(field_get:rpc.codec.RpcMessage.error)
  return static_cast< ::rpc::codec::ErrorCode >(error_);
}
inline void RpcMessage::set_error(::rpc::codec::ErrorCode value) {
  assert(::rpc::codec::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  error_ = value;
  // @@protoc_insertion_point(field_set:rpc.codec.RpcMessage.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace codec
}  // namespace rpc

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rpc::codec::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::codec::MsgType>() {
  return ::rpc::codec::MsgType_descriptor();
}
template <> struct is_proto_enum< ::rpc::codec::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::codec::ErrorCode>() {
  return ::rpc::codec::ErrorCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_RpcMessage_2eproto
